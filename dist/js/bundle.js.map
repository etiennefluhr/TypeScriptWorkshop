{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/typescript/KeyCodes.ts","webpack:///./src/typescript/KeySystem.ts","webpack:///./src/typescript/Mfg.ts","webpack:///./src/typescript/MfgDemo.ts","webpack:///./src/typescript/MfgRect.ts","webpack:///./src/typescript/index.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/typescript/index.ts\");\n","\r\n/** ****************************************************************************************************************\r\n *   All key codes that are used in the game.\r\n *******************************************************************************************************************/\r\nexport abstract class KeyCodes\r\n{\r\n    /** The keycode that represents the 'ARROW LEFT' key. */\r\n    public      static  readonly    KEY_LEFT                :string                         = 'ArrowLeft';\r\n    /** The keycode that represents the 'ARROW UP' key. */\r\n    public      static  readonly    KEY_UP                  :string                         = 'ArrowUp';\r\n    /** The keycode that represents the 'ARROW RIGHT' key. */\r\n    public      static  readonly    KEY_RIGHT               :string                         = 'ArrowRight';\r\n    /** The keycode that represents the 'ARROW DOWN' key. */\r\n    public      static  readonly    KEY_DOWN                :string                         = 'ArrowDown';\r\n\r\n    /** The keycode that represents the 'W' key. */\r\n    public      static  readonly    KEY_W                   :string                         = 'KeyW';\r\n    /** The keycode that represents the 'A' key. */\r\n    public      static  readonly    KEY_A                   :string                         = 'KeyA';\r\n    /** The keycode that represents the 'S' key. */\r\n    public      static  readonly    KEY_S                   :string                         = 'KeyS';\r\n    /** The keycode that represents the 'D' key. */\r\n    public      static  readonly    KEY_D                   :string                         = 'KeyD';\r\n\r\n    /** The keycode that represents the 'Q' key. */\r\n    public      static  readonly    KEY_Q                   :string                         = 'KeyQ';\r\n    /** The keycode that represents the 'E' key. */\r\n    public      static  readonly    KEY_E                   :string                         = 'KeyE';\r\n\r\n    /** The keycode that represents the 'F' key. */\r\n    public      static  readonly    KEY_F                   :string                         = 'KeyF';\r\n    /** The keycode that represents the 'R' key. */\r\n    public      static  readonly    KEY_R                   :string                         = 'KeyR';\r\n\r\n    /** The keycode that represents the 'Y' key. This is affected by the EN keyboard scheme. */\r\n    public      static  readonly    KEY_Y                   :string                         = 'KeyZ';\r\n    /** The keycode that represents the 'X' key. */\r\n    public      static  readonly    KEY_X                   :string                         = 'KeyX';\r\n\r\n    /** The keycode that represents the 'P' key. */\r\n    public      static  readonly    KEY_P                   :string                         = 'KeyP';\r\n\r\n    /** The keycode that represents the 'ENTER' key. */\r\n    public      static  readonly    KEY_ENTER               :string                         = 'Enter';\r\n    /** The keycode that represents the 'ESCAPE' key. */\r\n    public      static  readonly    KEY_ESCAPE              :string                         = 'Escape';\r\n    /** The keycode that represents the 'SPACE' key. */\r\n    public      static  readonly    KEY_SPACE               :string                         = 'Space';\r\n    /** The keycode that represents the 'LEFT CONTROL' key. */\r\n    public      static  readonly    KEY_CTRL_LEFT           :string                         = 'ControlLeft';\r\n    /** The keycode that represents the 'LEFT SHIFT' key. */\r\n    public      static  readonly    KEY_SHIFT_LEFT          :string                         = 'ShiftLeft';\r\n\r\n    /** The keycode that represents the '1' key. */\r\n    public      static  readonly    KEY_1                   :string                         = 'Digit1';\r\n    /** The keycode that represents the '2' key. */\r\n    public      static  readonly    KEY_2                   :string                         = 'Digit2';\r\n    /** The keycode that represents the '3' key. */\r\n    public      static  readonly    KEY_3                   :string                         = 'Digit3';\r\n    /** The keycode that represents the '4' key. */\r\n    public      static  readonly    KEY_4                   :string                         = 'Digit4';\r\n    /** The keycode that represents the '5' key. */\r\n    public      static  readonly    KEY_5                   :string                         = 'Digit5';\r\n}\r\n","\r\n/** ****************************************************************************************************************\r\n *   The key system that manages all pressed keys.\r\n *******************************************************************************************************************/\r\nexport class KeySystem\r\n{\r\n    /** All 'pressed' information for all keys. */\r\n    private                         keysPressed             :boolean[]                      = [];\r\n    /** All 'needs release' information for all keys. */\r\n    private                         keysNeedRelease         :boolean[]                      = [];\r\n\r\n    /** ************************************************************************************************************\r\n     *   Creates a new key system.\r\n     ***************************************************************************************************************/\r\n    public constructor()\r\n    {\r\n        window.addEventListener( 'keydown',     ( event:Event ) => { this.onKeyDown( event ) }, false );\r\n        window.addEventListener( 'keyup',       ( event:Event ) => { this.onKeyUp(   event ) }, false );\r\n        window.addEventListener( 'onkeydown',   ( event:Event ) => { this.onKeyDown( event ) }, false );\r\n        window.addEventListener( 'onkeyup',     ( event:Event ) => { this.onKeyUp(   event ) }, false );\r\n    }\r\n\r\n    /** ************************************************************************************************************\r\n     *   Being invoked by the system when a key is pressed.\r\n     *\r\n     *   @param event The system's propagated key event.\r\n     ***************************************************************************************************************/\r\n    public onKeyDown( event:Event ) : void\r\n    {\r\n        const keyCode:string = ( event as KeyboardEvent ).code;\r\n\r\n        if (\r\n            !this.keysNeedRelease[ keyCode ]\r\n        )\r\n        {\r\n            this.keysPressed[ keyCode ] = true;\r\n        }\r\n    }\r\n\r\n    /** ************************************************************************************************************\r\n     *   Being invoked by the system when a key is released.\r\n     *\r\n     *   @param event The system's propagated key event.\r\n     ***************************************************************************************************************/\r\n    public onKeyUp( event:Event ) : void\r\n    {\r\n        const keyCode:string = ( event as KeyboardEvent ).code;\r\n\r\n        this.keysPressed[     keyCode ] = false;\r\n        this.keysNeedRelease[ keyCode ] = false;\r\n    }\r\n\r\n    /** ************************************************************************************************************\r\n     *   Checks if the key with the given keyCode is currently pressed.\r\n     *\r\n     *   @param  keyCode The keyCode of the key to return pressed state.\r\n     *\r\n     *   @return         <code>true</code> if this key is currently pressed.\r\n     *                   Otherwise <code>false</code>.\r\n     ***************************************************************************************************************/\r\n    public isPressed( keyCode:string ) : boolean\r\n    {\r\n        return this.keysPressed[ keyCode ];\r\n    }\r\n\r\n    /** ************************************************************************************************************\r\n     *   Flags that a key needs release before being able to be pressed again.\r\n     *\r\n     *   @param keyCode The keyCode of the key to mark as 'needs key release'.\r\n     ***************************************************************************************************************/\r\n    public setNeedsRelease( keyCode:string ) : void\r\n    {\r\n        this.keysNeedRelease[  keyCode ] = true;\r\n        this.keysPressed[      keyCode ] = false;\r\n    }\r\n\r\n    /** ************************************************************************************************************\r\n     *   Flags all keys as released, forcing the user to press certain keys again.\r\n     *   Handy to invoke when the game screen loses the focus.\r\n     ***************************************************************************************************************/\r\n    public releaseAllKeys() : void\r\n    {\r\n        this.keysPressed = [];\r\n    }\r\n}\r\n","/**\r\n     *   The main class containing the point of entry.\r\n     */\r\n// @ts-ignore\r\nimport {MfgDemo} from \"./MfgDemo\";\r\n\r\nexport class Mfg\r\n    {\r\n        /** The singleton instance of the demo. */\r\n        public          static          demo                :MfgDemo                = null;\r\n        /**\r\n         *   The application's point of entry.\r\n         */\r\n        public static main():void\r\n        {\r\n            Mfg.setDocumentTitle();\r\n            Mfg.styleHtmlBody();\r\n\r\n            Mfg.demo = new MfgDemo();\r\n            Mfg.demo.init();\r\n\r\n        }\r\n\r\n        /**\r\n         *   Dynamically sets the document's title.\r\n         */\r\n        private static setDocumentTitle():void\r\n        {\r\n            document.title = \"TypeScript Minimal Primer, (c) 2020 Mayflower GmbH, v. 1.0\";\r\n        }\r\n\r\n        /**\r\n         *   Dynamically applies css to the HTML body tag.\r\n         */\r\n        private static styleHtmlBody():void\r\n        {\r\n            let style:CSSStyleDeclaration = document.body.style;\r\n            style.backgroundColor = \"grey\";\r\n            style.textAlign       = \"center\";\r\n            style.margin          = \"25px\";\r\n        }\r\n    }\r\n","import { MfgRect } from './MfgRect';\r\nimport { KeyCodes } from './KeyCodes';\r\nimport { KeySystem } from './KeySystem';\r\n\r\n/**\r\n *   Handles the demo logic.\r\n */\r\nexport class MfgDemo\r\n{\r\n    /** The canvas rendering context for all 2D drawing operations. */\r\n    private                 canvasContext           :CanvasRenderingContext2D       = null;\r\n    /** The key system. */\r\n    private                 keySystem               :KeySystem                      = null;\r\n\r\n    /** All rects to show in the demo. */\r\n    private                 items                   :MfgRect[]                 = null;\r\n\r\n    private                 player                  :MfgRect                        = null;\r\n\r\n    /**\r\n     *   Creates a new demo logic.\r\n     */\r\n    public constructor()\r\n    {\r\n    }\r\n\r\n    /**\r\n     *   Inits this demo from scratch.\r\n     */\r\n    public init():void\r\n    {\r\n        this.initCanvas();\r\n        this.initKeySystem();\r\n        this.initGameElements();\r\n\r\n        this.startDemoLoop();\r\n    }\r\n\r\n    /**\r\n     *   Inits the canvas and appends it to the HTML body element.\r\n     */\r\n    private initCanvas():void\r\n    {\r\n        const canvasTag:HTMLCanvasElement = document.createElement('canvas');\r\n\r\n        canvasTag.width                 = 1200;\r\n        canvasTag.height                = 700;\r\n        canvasTag.style.backgroundColor = 'white';\r\n\r\n        document.body.appendChild(canvasTag);\r\n\r\n        this.canvasContext = canvasTag.getContext('2d');\r\n    }\r\n\r\n    /**\r\n     *   Inits the key system.\r\n     */\r\n    private initKeySystem():void\r\n    {\r\n        this.keySystem = new KeySystem();\r\n    }\r\n\r\n    /**\r\n     *   Inits all rects for this level.\r\n     */\r\n    private initGameElements():void\r\n    {\r\n        this.items = [\r\n            new MfgRect(125, 25,  75,  75,  'orange'),\r\n            new MfgRect(300, 150, 120, 30,  'yellow'),\r\n            new MfgRect(550, 250, 30,  120, 'red'   ),\r\n            new MfgRect(620, 75,  100, 50,  'grey'  ),\r\n            new MfgRect( 800, 40, 300, 50, 'red' ),\r\n        ];\r\n\r\n        this.player = new MfgRect(100, 200, 50, 40, 'blue');\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log('Created [' + this.items.length + '] rects.');\r\n    }\r\n\r\n    /**\r\n     *   Starts the endless demo loop.\r\n     */\r\n    private startDemoLoop():void\r\n    {\r\n        window.setInterval(this.tick, 10);\r\n    }\r\n\r\n    /**\r\n     *   Handles one demo tick.\r\n     */\r\n    private tick=()=>\r\n    {\r\n        this.render();\r\n        this.draw();\r\n    };\r\n\r\n    /**\r\n     *   Renders the current game tick.\r\n     */\r\n    private render():void\r\n    {\r\n        for (const item of this.items) {\r\n            item.y += 0.8;\r\n        }\r\n\r\n        if ( this.keySystem.isPressed( KeyCodes.KEY_RIGHT ) )\r\n        {\r\n            this.player.x += 5.0;\r\n        }\r\n\r\n        if ( this.keySystem.isPressed( KeyCodes.KEY_LEFT ) )\r\n        {\r\n            this.player.x -= 5.0;\r\n        }\r\n\r\n        if ( this.keySystem.isPressed( KeyCodes.KEY_UP ) )\r\n        {\r\n            this.player.y -= 5.0\r\n        }\r\n\r\n        if ( this.keySystem.isPressed( KeyCodes.KEY_DOWN ) )\r\n        {\r\n            this.player.y += 5.0\r\n        }\r\n\r\n        // check collision of player with item\r\n        for (const item of this.items) {\r\n\r\n            if ( this.player.collidesWithRect( item  ) )\r\n            {\r\n                // console.log( \"kollision!\" );\r\n\r\n                item.color = 'transparent';\r\n            }\r\n        }\r\n\r\n        // lets player move threw a wall to the opposite wall\r\n        if ( this.player.x <=0 ) {\r\n\r\n            // console.log( \"hit the end.\" );\r\n\r\n            this.player.x = 1200\r\n        }\r\n\r\n        if ( this.player.x == 1205 ) {\r\n\r\n            this.player.x = 0\r\n        }\r\n\r\n       if ( this.player.y <=0 ) {\r\n\r\n           this.player.y = 700\r\n        }\r\n\r\n        if ( this.player.y === 705 ) {\r\n\r\n            this.player.y = 0\r\n        }\r\n\r\n\r\n        for (const item of this.items) {\r\n\r\n            if ( this.player.collidesWithRect ( item ) ) {\r\n                location.reload( true);\r\n            }\r\n            }\r\n\r\n    }\r\n\r\n    /**\r\n     *   Draws the current game tick.\r\n     */\r\n    private draw():void\r\n    {\r\n        this.canvasContext.clearRect(0, 0, 1200, 700);\r\n\r\n        for (const item of this.items) {\r\n            item.draw(this.canvasContext);\r\n        }\r\n        // this.canvasContext.clearRect(0, 0, 900, 500);\r\n\r\n        this.player.draw(this.canvasContext);\r\n\r\n    }\r\n}\r\n","/**\r\n *   A rectangular in 2D space.\r\n */\r\nexport class MfgRect\r\n{\r\n    /** The left coordinate. */\r\n    public              x               :number                     = 0;\r\n    /** The top coordinate. */\r\n    public              y               :number                     = 0;\r\n    /** The horizontal dimension. */\r\n    public              width           :number                     = 0;\r\n    /** The vertical dimension. */\r\n    public              height          :number                     = 0;\r\n    /** The fill color. */\r\n    public              color           :string                     = null;\r\n\r\n    /**\r\n     *   Constructs a new rectangular in 2D space.\r\n     *\r\n     *   @param x      Left coordinate.\r\n     *   @param y      Top coordinate.\r\n     *   @param width  Horizontal dimension.\r\n     *   @param height Vertical dimension.\r\n     *   @param color  Fill color.\r\n     */\r\n    public constructor(x:number, y:number, width:number, height:number, color:string)\r\n    {\r\n        this.x      = x;\r\n        this.y      = y;\r\n        this.width  = width;\r\n        this.height = height;\r\n        this.color  = color;\r\n    }\r\n\r\n    /**\r\n     *   Fills a rect with the specified dimensions and color.\r\n     *\r\n     *   @param ctx The rendering context.\r\n     */\r\n    public draw(ctx:CanvasRenderingContext2D):void\r\n    {\r\n        ctx.fillStyle = this.color;\r\n        ctx.fillRect( this.x, this.y, this.width, this.height );\r\n    }\r\n\r\n    /*****************************************************************************\r\n     *   Checks if the given rect intersects this rect.\r\n     *\r\n     *   @param  rect    The rect to check for intersection.\r\n     *   @return         <code>true</code> if the rects collide.\r\n     *                   Otherwise <code>false</code>.\r\n     *****************************************************************************/\r\n    public collidesWithRect( rect:MfgRect ):boolean\r\n    {\r\n        return !(\r\n                this.x                  >= rect.x + rect.width\r\n            ||  this.x  + this.width    <= rect.x\r\n            ||  this.y                  >= rect.y + rect.height\r\n            ||  this.y  + this.height   <= rect.y\r\n        );\r\n    }\r\n}","\r\n    import { Mfg } from './Mfg';\r\n\r\n    /** ****************************************************************************************************************\r\n    *   Being invoked when the page is loaded completely.\r\n    *******************************************************************************************************************/\r\n    window.onload = () : void  =>\r\n    {\r\n        Mfg.main();\r\n    };\r\n\r\n    /** ****************************************************************************************************************\r\n    *   Being invoked when the page is left.\r\n    *******************************************************************************************************************/\r\n    window.onunload = () : void  =>\r\n    {\r\n        // no actions required on leaving website\r\n    };\r\n"],"sourceRoot":""}